// C√°lculo do pre√ßo otimizado para a Oferta Completa - 10pcsTouMing-blue
// Considerando taxas do AliExpress para garantir lucratividade

// Taxas do AliExpress
const ALIEXPRESS_FEES = {
    commissionRate: 0.06, // 6% - comiss√£o do AliExpress
    paymentProcessing: 0.029, // 2.9% + $0.30 por transa√ß√£o
    currencyExchange: 0.02, // 2% para convers√µes de moeda
    withdrawalFee: 0.01, // 1% para retirada de fundos
    marketingFee: 0.05, // 5% se usar an√∫ncios pagos
    fixedCosts: 0.50 // Custos fixos por item
};

// Dados da oferta completa
const COMPLETE_DATA = {
    originalPrice: "$4.19", // Pre√ßo de compra no AliExpress
    originalPriceFull: "$4.80", // Pre√ßo original sem desconto
    stock: 10,
    productName: "10pcsTouMing-blue"
};

// Fun√ß√£o para calcular pre√ßo m√≠nimo lucrativo
function calculateMinimumProfitablePrice(originalPrice, targetMargin = 0.15) {
    const originalPriceValue = parseFloat(originalPrice.replace('$', ''));
    
    // Calcular custos fixos (taxas + custos fixos)
    const fixedCosts = ALIEXPRESS_FEES.fixedCosts + 0.30; // $0.30 da taxa de pagamento
    
    // Calcular pre√ßo m√≠nimo considerando todas as taxas
    const totalTaxRate = ALIEXPRESS_FEES.commissionRate + 
                        ALIEXPRESS_FEES.paymentProcessing + 
                        ALIEXPRESS_FEES.currencyExchange + 
                        ALIEXPRESS_FEES.withdrawalFee + 
                        ALIEXPRESS_FEES.marketingFee;
    
    const minimumPrice = (originalPriceValue + fixedCosts) / (1 - totalTaxRate - targetMargin);
    
    return {
        minimum: minimumPrice,
        recommended: minimumPrice * 1.1, // 10% a mais para margem de seguran√ßa
        original: originalPriceValue
    };
}

console.log("üõçÔ∏è C√ÅLCULO DE PRE√áO OTIMIZADO - OFERTA COMPLETA");
console.log("=" .repeat(60));

const priceCalc = calculateMinimumProfitablePrice(COMPLETE_DATA.originalPrice);

console.log(`\n${COMPLETE_DATA.productName.toUpperCase()}:`);
console.log(`  üíµ Pre√ßo original: ${COMPLETE_DATA.originalPrice}`);
console.log(`  üí∏ Pre√ßo original completo: ${COMPLETE_DATA.originalPriceFull}`);
console.log(`  ‚ö†Ô∏è  Pre√ßo m√≠nimo: $${priceCalc.minimum.toFixed(2)}`);
console.log(`  ‚úÖ Pre√ßo recomendado: $${priceCalc.recommended.toFixed(2)}`);
console.log(`  üìà Margem: 15%`);
console.log(`  üì¶ Estoque: ${COMPLETE_DATA.stock} unidades`);

// An√°lise de lucratividade com pre√ßo recomendado
console.log("\nüí∞ AN√ÅLISE DE LUCRATIVIDADE COM PRE√áO RECOMENDADO:");
console.log("=" .repeat(60));

const sellingPrice = priceCalc.recommended;
const originalPrice = priceCalc.original;

// Calcular taxas
const commissionFee = sellingPrice * ALIEXPRESS_FEES.commissionRate;
const paymentFee = (sellingPrice * ALIEXPRESS_FEES.paymentProcessing) + 0.30;
const exchangeFee = sellingPrice * ALIEXPRESS_FEES.currencyExchange;
const withdrawalFee = sellingPrice * ALIEXPRESS_FEES.withdrawalFee;
const marketingFee = sellingPrice * ALIEXPRESS_FEES.marketingFee;

const totalFees = commissionFee + paymentFee + exchangeFee + withdrawalFee + marketingFee;
const totalCosts = originalPrice + totalFees + ALIEXPRESS_FEES.fixedCosts;
const netProfit = sellingPrice - totalCosts;
const profitMargin = (netProfit / sellingPrice) * 100;

console.log(`\n${COMPLETE_DATA.productName.toUpperCase()}:`);
console.log(`  üí∞ Lucro l√≠quido: $${netProfit.toFixed(2)}`);
console.log(`  üìä Margem real: ${profitMargin.toFixed(2)}%`);
console.log(`  üí∏ Total taxas: $${totalFees.toFixed(2)}`);
console.log(`  üì¶ Lucro total potencial: $${(netProfit * COMPLETE_DATA.stock).toFixed(2)}`);

// Compara√ß√£o com pre√ßo anterior
const oldPrice = 4.29; // Pre√ßo anterior calculado
const oldProfit = oldPrice - originalPrice - totalFees - ALIEXPRESS_FEES.fixedCosts;
const improvement = netProfit - oldProfit;

console.log("\nüìä COMPARA√á√ÉO COM PRE√áO ANTERIOR:");
console.log("=" .repeat(40));
console.log(`  üíµ Pre√ßo anterior: $${oldPrice.toFixed(2)}`);
console.log(`  üí∞ Lucro anterior: $${oldProfit.toFixed(2)}`);
console.log(`  üìà Melhoria: +$${improvement.toFixed(2)}`);
console.log(`  üìä Melhoria %: +${((improvement / oldProfit) * 100).toFixed(1)}%`);

// Pre√ßo final recomendado
const FINAL_COMPLETE_PRICE = {
    originalPrice: COMPLETE_DATA.originalPrice,
    profitPrice: `$${priceCalc.recommended.toFixed(2)}`,
    profitPriceBRL: `R$${(priceCalc.recommended * 5.27).toFixed(2)}`,
    margin: "15%",
    stock: COMPLETE_DATA.stock,
    productName: COMPLETE_DATA.productName,
    netProfit: netProfit,
    profitMargin: profitMargin,
    totalPotentialProfit: netProfit * COMPLETE_DATA.stock
};

console.log("\nüéØ PRE√áO FINAL RECOMENDADO PARA IMPLEMENTA√á√ÉO:");
console.log("=" .repeat(60));
console.log(`üí∞ Pre√ßo otimizado: ${FINAL_COMPLETE_PRICE.profitPrice}`);
console.log(`üíé Pre√ßo em BRL: ${FINAL_COMPLETE_PRICE.profitPriceBRL}`);
console.log(`üìä Margem real: ${FINAL_COMPLETE_PRICE.profitMargin.toFixed(2)}%`);
console.log(`üíµ Lucro por unidade: $${FINAL_COMPLETE_PRICE.netProfit.toFixed(2)}`);
console.log(`üéØ Lucro total potencial: $${FINAL_COMPLETE_PRICE.totalPotentialProfit.toFixed(2)}`);

// Exportar dados
export const OPTIMIZED_COMPLETE_PRICE = FINAL_COMPLETE_PRICE;

console.log("\n‚úÖ Pre√ßo completo otimizado calculado com sucesso!");
console.log("üí° Pre√ßo garante margem m√≠nima de 15%");
console.log("üéØ Pre√ßo √© acess√≠vel e lucrativo");


